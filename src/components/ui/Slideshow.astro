---
/**
 * Youkan-Themes Slideshow Component
 * シンプルなスライドショーコンポーネント
 */

import { css } from '../../styled-system/css';
import { slide, slideItem, btn } from '../../styled-system/recipes';

export interface Slide {
  title: string;
  description: string;
  image?: string;
  link?: string;
  linkText?: string;
}

export interface Props {
  slides: Slide[];
  size?: 'sm' | 'md' | 'lg' | 'xl';
  autoPlay?: boolean;
  autoPlayInterval?: number;
  showControls?: boolean;
}

const { 
  slides = [],
  size = 'md',
  autoPlay = false,
  autoPlayInterval = 4000,
  showControls = true
} = Astro.props;

const slideClass = slide({ size });

const controlsStyle = css({
  position: 'absolute',
  bottom: '20px',
  left: '50%',
  transform: 'translateX(-50%)',
  display: 'flex',
  gap: '10px',
  zIndex: '10',
});

const indicatorStyle = css({
  width: '12px',
  height: '12px',
  borderRadius: '50%',
  backgroundColor: 'rgba(255, 255, 255, 0.5)',
  border: 'none',
  cursor: 'pointer',
  transition: 'all 0.3s',
  _hover: {
    backgroundColor: 'rgba(255, 255, 255, 0.8)',
  },
});

const activeIndicatorStyle = css({
  backgroundColor: 'white',
});

const contentStyle = css({
  position: 'absolute',
  bottom: '60px',
  left: '30px',
  right: '30px',
  color: 'white',
  textAlign: 'center',
  zIndex: '5',
});

const titleStyle = css({
  fontSize: '2rem',
  fontWeight: 'bold',
  marginBottom: '0.5rem',
  textShadow: '0 2px 4px rgba(0,0,0,0.5)',
  '@media (max-width: 768px)': {
    fontSize: '1.5rem'
  }
});

const descriptionStyle = css({
  fontSize: '1.1rem',
  marginBottom: '1rem',
  textShadow: '0 1px 2px rgba(0,0,0,0.5)',
  '@media (max-width: 768px)': {
    fontSize: '1rem'
  }
});

const slideImageStyle = css({
  width: '100%',
  height: '100%',
  objectFit: 'cover',
});

const overlayStyle = css({
  position: 'absolute',
  top: '0',
  left: '0',
  right: '0',
  bottom: '0',
  background: 'linear-gradient(to bottom, rgba(0,0,0,0.2) 0%, rgba(0,0,0,0.7) 100%)',
  zIndex: '2',
});
---

<div class={slideClass} id="youkan-slideshow">
  {slides.map((slideData, index) => (
    <div 
      class={slideItem({ state: index === 0 ? 'active' : 'next' })}
      data-slide={index}
    >
      {slideData.image && (
        <img 
          src={slideData.image} 
          alt={slideData.title}
          class={slideImageStyle}
        />
      )}
      <div class={overlayStyle}></div>
      <div class={contentStyle}>
        <h3 class={titleStyle}>{slideData.title}</h3>
        <p class={descriptionStyle}>{slideData.description}</p>
        {slideData.link && (
          <a 
            href={slideData.link} 
            class={btn({ variant: 'secondary', size: 'md' })}
          >
            {slideData.linkText || '詳しく見る'}
          </a>
        )}
      </div>
    </div>
  ))}
  
  {showControls && slides.length > 1 && (
    <div class={controlsStyle}>
      {slides.map((_, index) => (
        <button 
          class={`${indicatorStyle} ${index === 0 ? activeIndicatorStyle : ''}`}
          data-slide-to={index}
          aria-label={`スライド ${index + 1} に移動`}
        ></button>
      ))}
    </div>
  )}
</div>

<script define:vars={{ autoPlay, autoPlayInterval }}>
  let currentSlide = 0;
  let slideInterval;
  
  const slideshow = document.getElementById('youkan-slideshow');
  const slides = slideshow?.querySelectorAll('[data-slide]');
  const indicators = slideshow?.querySelectorAll('[data-slide-to]');
  
  function showSlide(index) {
    if (!slides || !indicators) return;
    
    // Hide all slides
    slides.forEach((slide, i) => {
      if (i === index) {
        slide.classList.remove('slide-item--state_next', 'slide-item--state_prev');
        slide.classList.add('slide-item--state_active');
      } else if (i < index) {
        slide.classList.remove('slide-item--state_active', 'slide-item--state_next');
        slide.classList.add('slide-item--state_prev');
      } else {
        slide.classList.remove('slide-item--state_active', 'slide-item--state_prev');
        slide.classList.add('slide-item--state_next');
      }
    });
    
    // Update indicators
    indicators.forEach((indicator, i) => {
      if (i === index) {
        indicator.style.backgroundColor = 'white';
      } else {
        indicator.style.backgroundColor = 'rgba(255, 255, 255, 0.5)';
      }
    });
    
    currentSlide = index;
  }
  
  function nextSlide() {
    const nextIndex = (currentSlide + 1) % slides.length;
    showSlide(nextIndex);
  }
  
  function startAutoPlay() {
    if (autoPlay && slides.length > 1) {
      slideInterval = setInterval(nextSlide, autoPlayInterval);
    }
  }
  
  function stopAutoPlay() {
    if (slideInterval) {
      clearInterval(slideInterval);
    }
  }
  
  // Event listeners
  indicators?.forEach((indicator, index) => {
    indicator.addEventListener('click', () => {
      stopAutoPlay();
      showSlide(index);
      startAutoPlay();
    });
  });
  
  slideshow?.addEventListener('mouseenter', stopAutoPlay);
  slideshow?.addEventListener('mouseleave', startAutoPlay);
  
  // Initialize
  startAutoPlay();
</script>
